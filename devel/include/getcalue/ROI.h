// Generated by gencpp from file getcalue/ROI.msg
// DO NOT EDIT!


#ifndef GETCALUE_MESSAGE_ROI_H
#define GETCALUE_MESSAGE_ROI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace getcalue
{
template <class ContainerAllocator>
struct ROI_
{
  typedef ROI_<ContainerAllocator> Type;

  ROI_()
    : object_name()
    , score(0.0)
    , min_x(0)
    , Max_x(0)
    , min_y(0)
    , Max_y(0)  {
    }
  ROI_(const ContainerAllocator& _alloc)
    : object_name(_alloc)
    , score(0.0)
    , min_x(0)
    , Max_x(0)
    , min_y(0)
    , Max_y(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_name_type;
  _object_name_type object_name;

   typedef float _score_type;
  _score_type score;

   typedef int32_t _min_x_type;
  _min_x_type min_x;

   typedef int32_t _Max_x_type;
  _Max_x_type Max_x;

   typedef int32_t _min_y_type;
  _min_y_type min_y;

   typedef int32_t _Max_y_type;
  _Max_y_type Max_y;





  typedef boost::shared_ptr< ::getcalue::ROI_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::getcalue::ROI_<ContainerAllocator> const> ConstPtr;

}; // struct ROI_

typedef ::getcalue::ROI_<std::allocator<void> > ROI;

typedef boost::shared_ptr< ::getcalue::ROI > ROIPtr;
typedef boost::shared_ptr< ::getcalue::ROI const> ROIConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::getcalue::ROI_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::getcalue::ROI_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::getcalue::ROI_<ContainerAllocator1> & lhs, const ::getcalue::ROI_<ContainerAllocator2> & rhs)
{
  return lhs.object_name == rhs.object_name &&
    lhs.score == rhs.score &&
    lhs.min_x == rhs.min_x &&
    lhs.Max_x == rhs.Max_x &&
    lhs.min_y == rhs.min_y &&
    lhs.Max_y == rhs.Max_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::getcalue::ROI_<ContainerAllocator1> & lhs, const ::getcalue::ROI_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace getcalue

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::getcalue::ROI_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::getcalue::ROI_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::getcalue::ROI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::getcalue::ROI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::getcalue::ROI_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::getcalue::ROI_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::getcalue::ROI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94c6de870ee9725e733216fafc995b64";
  }

  static const char* value(const ::getcalue::ROI_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94c6de870ee9725eULL;
  static const uint64_t static_value2 = 0x733216fafc995b64ULL;
};

template<class ContainerAllocator>
struct DataType< ::getcalue::ROI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "getcalue/ROI";
  }

  static const char* value(const ::getcalue::ROI_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::getcalue::ROI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string object_name\n"
"float32 score\n"
"int32 min_x\n"
"int32 Max_x\n"
"int32 min_y\n"
"int32 Max_y\n"
;
  }

  static const char* value(const ::getcalue::ROI_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::getcalue::ROI_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_name);
      stream.next(m.score);
      stream.next(m.min_x);
      stream.next(m.Max_x);
      stream.next(m.min_y);
      stream.next(m.Max_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ROI_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::getcalue::ROI_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::getcalue::ROI_<ContainerAllocator>& v)
  {
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_name);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
    s << indent << "min_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.min_x);
    s << indent << "Max_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Max_x);
    s << indent << "min_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.min_y);
    s << indent << "Max_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Max_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GETCALUE_MESSAGE_ROI_H
