// Generated by gencpp from file ROS_Socket/arm_mode.msg
// DO NOT EDIT!


#ifndef ROS_SOCKET_MESSAGE_ARM_MODE_H
#define ROS_SOCKET_MESSAGE_ARM_MODE_H

#include <ros/service_traits.h>


#include <ROS_Socket/arm_modeRequest.h>
#include <ROS_Socket/arm_modeResponse.h>


namespace ROS_Socket
{

struct arm_mode
{

typedef arm_modeRequest Request;
typedef arm_modeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct arm_mode
} // namespace ROS_Socket


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::ROS_Socket::arm_mode > {
  static const char* value()
  {
    return "b362365c058a7d0b0b5500677cb1d63b";
  }

  static const char* value(const ::ROS_Socket::arm_mode&) { return value(); }
};

template<>
struct DataType< ::ROS_Socket::arm_mode > {
  static const char* value()
  {
    return "ROS_Socket/arm_mode";
  }

  static const char* value(const ::ROS_Socket::arm_mode&) { return value(); }
};


// service_traits::MD5Sum< ::ROS_Socket::arm_modeRequest> should match
// service_traits::MD5Sum< ::ROS_Socket::arm_mode >
template<>
struct MD5Sum< ::ROS_Socket::arm_modeRequest>
{
  static const char* value()
  {
    return MD5Sum< ::ROS_Socket::arm_mode >::value();
  }
  static const char* value(const ::ROS_Socket::arm_modeRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::ROS_Socket::arm_modeRequest> should match
// service_traits::DataType< ::ROS_Socket::arm_mode >
template<>
struct DataType< ::ROS_Socket::arm_modeRequest>
{
  static const char* value()
  {
    return DataType< ::ROS_Socket::arm_mode >::value();
  }
  static const char* value(const ::ROS_Socket::arm_modeRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::ROS_Socket::arm_modeResponse> should match
// service_traits::MD5Sum< ::ROS_Socket::arm_mode >
template<>
struct MD5Sum< ::ROS_Socket::arm_modeResponse>
{
  static const char* value()
  {
    return MD5Sum< ::ROS_Socket::arm_mode >::value();
  }
  static const char* value(const ::ROS_Socket::arm_modeResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::ROS_Socket::arm_modeResponse> should match
// service_traits::DataType< ::ROS_Socket::arm_mode >
template<>
struct DataType< ::ROS_Socket::arm_modeResponse>
{
  static const char* value()
  {
    return DataType< ::ROS_Socket::arm_mode >::value();
  }
  static const char* value(const ::ROS_Socket::arm_modeResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // ROS_SOCKET_MESSAGE_ARM_MODE_H
