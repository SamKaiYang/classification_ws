// Generated by gencpp from file ROS_Socket/speed_modeRequest.msg
// DO NOT EDIT!


#ifndef ROS_SOCKET_MESSAGE_SPEED_MODEREQUEST_H
#define ROS_SOCKET_MESSAGE_SPEED_MODEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ROS_Socket
{
template <class ContainerAllocator>
struct speed_modeRequest_
{
  typedef speed_modeRequest_<ContainerAllocator> Type;

  speed_modeRequest_()
    : Speedmode(0)  {
    }
  speed_modeRequest_(const ContainerAllocator& _alloc)
    : Speedmode(0)  {
  (void)_alloc;
    }



   typedef int32_t _Speedmode_type;
  _Speedmode_type Speedmode;





  typedef boost::shared_ptr< ::ROS_Socket::speed_modeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ROS_Socket::speed_modeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct speed_modeRequest_

typedef ::ROS_Socket::speed_modeRequest_<std::allocator<void> > speed_modeRequest;

typedef boost::shared_ptr< ::ROS_Socket::speed_modeRequest > speed_modeRequestPtr;
typedef boost::shared_ptr< ::ROS_Socket::speed_modeRequest const> speed_modeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ROS_Socket::speed_modeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ROS_Socket::speed_modeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ROS_Socket::speed_modeRequest_<ContainerAllocator1> & lhs, const ::ROS_Socket::speed_modeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.Speedmode == rhs.Speedmode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ROS_Socket::speed_modeRequest_<ContainerAllocator1> & lhs, const ::ROS_Socket::speed_modeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ROS_Socket

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ROS_Socket::speed_modeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ROS_Socket::speed_modeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ROS_Socket::speed_modeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ROS_Socket::speed_modeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ROS_Socket::speed_modeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ROS_Socket::speed_modeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ROS_Socket::speed_modeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6d28e9e131c44e0129780d170036ce7";
  }

  static const char* value(const ::ROS_Socket::speed_modeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6d28e9e131c44e0ULL;
  static const uint64_t static_value2 = 0x129780d170036ce7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ROS_Socket::speed_modeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ROS_Socket/speed_modeRequest";
  }

  static const char* value(const ::ROS_Socket::speed_modeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ROS_Socket::speed_modeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 Speedmode\n"
;
  }

  static const char* value(const ::ROS_Socket::speed_modeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ROS_Socket::speed_modeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Speedmode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct speed_modeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ROS_Socket::speed_modeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ROS_Socket::speed_modeRequest_<ContainerAllocator>& v)
  {
    s << indent << "Speedmode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Speedmode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SOCKET_MESSAGE_SPEED_MODEREQUEST_H
