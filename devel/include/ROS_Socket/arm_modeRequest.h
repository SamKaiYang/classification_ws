// Generated by gencpp from file ROS_Socket/arm_modeRequest.msg
// DO NOT EDIT!


#ifndef ROS_SOCKET_MESSAGE_ARM_MODEREQUEST_H
#define ROS_SOCKET_MESSAGE_ARM_MODEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ROS_Socket
{
template <class ContainerAllocator>
struct arm_modeRequest_
{
  typedef arm_modeRequest_<ContainerAllocator> Type;

  arm_modeRequest_()
    : ra(0)
    , action(0)
    , grip(0)
    , vel(0)
    , both(0)  {
    }
  arm_modeRequest_(const ContainerAllocator& _alloc)
    : ra(0)
    , action(0)
    , grip(0)
    , vel(0)
    , both(0)  {
  (void)_alloc;
    }



   typedef int32_t _ra_type;
  _ra_type ra;

   typedef int32_t _action_type;
  _action_type action;

   typedef int32_t _grip_type;
  _grip_type grip;

   typedef int32_t _vel_type;
  _vel_type vel;

   typedef int32_t _both_type;
  _both_type both;





  typedef boost::shared_ptr< ::ROS_Socket::arm_modeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ROS_Socket::arm_modeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct arm_modeRequest_

typedef ::ROS_Socket::arm_modeRequest_<std::allocator<void> > arm_modeRequest;

typedef boost::shared_ptr< ::ROS_Socket::arm_modeRequest > arm_modeRequestPtr;
typedef boost::shared_ptr< ::ROS_Socket::arm_modeRequest const> arm_modeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ROS_Socket::arm_modeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ROS_Socket::arm_modeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ROS_Socket::arm_modeRequest_<ContainerAllocator1> & lhs, const ::ROS_Socket::arm_modeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ra == rhs.ra &&
    lhs.action == rhs.action &&
    lhs.grip == rhs.grip &&
    lhs.vel == rhs.vel &&
    lhs.both == rhs.both;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ROS_Socket::arm_modeRequest_<ContainerAllocator1> & lhs, const ::ROS_Socket::arm_modeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ROS_Socket

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ROS_Socket::arm_modeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ROS_Socket::arm_modeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ROS_Socket::arm_modeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ROS_Socket::arm_modeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ROS_Socket::arm_modeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ROS_Socket::arm_modeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ROS_Socket::arm_modeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14e7cc440862055b616759a22dacdd36";
  }

  static const char* value(const ::ROS_Socket::arm_modeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14e7cc440862055bULL;
  static const uint64_t static_value2 = 0x616759a22dacdd36ULL;
};

template<class ContainerAllocator>
struct DataType< ::ROS_Socket::arm_modeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ROS_Socket/arm_modeRequest";
  }

  static const char* value(const ::ROS_Socket::arm_modeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ROS_Socket::arm_modeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 ra\n"
"int32 action\n"
"int32 grip\n"
"int32 vel\n"
"int32 both\n"
;
  }

  static const char* value(const ::ROS_Socket::arm_modeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ROS_Socket::arm_modeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ra);
      stream.next(m.action);
      stream.next(m.grip);
      stream.next(m.vel);
      stream.next(m.both);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arm_modeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ROS_Socket::arm_modeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ROS_Socket::arm_modeRequest_<ContainerAllocator>& v)
  {
    s << indent << "ra: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ra);
    s << indent << "action: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action);
    s << indent << "grip: ";
    Printer<int32_t>::stream(s, indent + "  ", v.grip);
    s << indent << "vel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vel);
    s << indent << "both: ";
    Printer<int32_t>::stream(s, indent + "  ", v.both);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SOCKET_MESSAGE_ARM_MODEREQUEST_H
