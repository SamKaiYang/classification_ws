// Generated by gencpp from file ROS_Socket/grip_modeRequest.msg
// DO NOT EDIT!


#ifndef ROS_SOCKET_MESSAGE_GRIP_MODEREQUEST_H
#define ROS_SOCKET_MESSAGE_GRIP_MODEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ROS_Socket
{
template <class ContainerAllocator>
struct grip_modeRequest_
{
  typedef grip_modeRequest_<ContainerAllocator> Type;

  grip_modeRequest_()
    : grip(0)  {
    }
  grip_modeRequest_(const ContainerAllocator& _alloc)
    : grip(0)  {
  (void)_alloc;
    }



   typedef int32_t _grip_type;
  _grip_type grip;





  typedef boost::shared_ptr< ::ROS_Socket::grip_modeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ROS_Socket::grip_modeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct grip_modeRequest_

typedef ::ROS_Socket::grip_modeRequest_<std::allocator<void> > grip_modeRequest;

typedef boost::shared_ptr< ::ROS_Socket::grip_modeRequest > grip_modeRequestPtr;
typedef boost::shared_ptr< ::ROS_Socket::grip_modeRequest const> grip_modeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ROS_Socket::grip_modeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ROS_Socket::grip_modeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ROS_Socket::grip_modeRequest_<ContainerAllocator1> & lhs, const ::ROS_Socket::grip_modeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.grip == rhs.grip;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ROS_Socket::grip_modeRequest_<ContainerAllocator1> & lhs, const ::ROS_Socket::grip_modeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ROS_Socket

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ROS_Socket::grip_modeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ROS_Socket::grip_modeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ROS_Socket::grip_modeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ROS_Socket::grip_modeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ROS_Socket::grip_modeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ROS_Socket::grip_modeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ROS_Socket::grip_modeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fde367d31e32259b71ef32c4b90a9d2b";
  }

  static const char* value(const ::ROS_Socket::grip_modeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfde367d31e32259bULL;
  static const uint64_t static_value2 = 0x71ef32c4b90a9d2bULL;
};

template<class ContainerAllocator>
struct DataType< ::ROS_Socket::grip_modeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ROS_Socket/grip_modeRequest";
  }

  static const char* value(const ::ROS_Socket::grip_modeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ROS_Socket::grip_modeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 grip\n"
;
  }

  static const char* value(const ::ROS_Socket::grip_modeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ROS_Socket::grip_modeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.grip);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct grip_modeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ROS_Socket::grip_modeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ROS_Socket::grip_modeRequest_<ContainerAllocator>& v)
  {
    s << indent << "grip: ";
    Printer<int32_t>::stream(s, indent + "  ", v.grip);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SOCKET_MESSAGE_GRIP_MODEREQUEST_H
